import java.util.*;
class Solution {
    static List<Integer> list = new ArrayList<>();
    public int solution(String begin, String target, String[] words) {
        int answer = Integer.MAX_VALUE;
        boolean[] visited = new boolean[words.length];
        
        if(!check(target, words)) return 0;

        dfs(0, target, begin, words, visited);
        
        for(int i = 0; i< list.size(); i++) {
            answer = Math.min(answer, list.get(i));
        }
        
        return answer;
    }
    
    public boolean check(String target, String[] words) {
        for(int i = 0; i < words.length; i++) {
            if(target.equals(words[i])) return true;
        }
        return false;
    }
    
    public void dfs(int num, String target, String begin, String[] words, boolean[] visited) {
        if(begin.equals(target)) {
            list.add(num);
            return;
        }

        for(int i = 0; i < words.length; i++) {
            int count = 0;
            if(!visited[i]) {
                for(int j = 0; j < words[i].length(); j++) {
                    if(begin.charAt(j) != words[i].charAt(j)) count++;
                }
            }
            if(count == 1) {
                visited[i] = true;
                dfs(num+1, target, words[i], words, visited);
                visited[i] = false;
            }
        }
    }
}