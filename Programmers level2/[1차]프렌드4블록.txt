class Solution {
    public int solution(int m, int n, String[] board) {
        int answer = 0;
        int[][] arr;
        int count;
        
        do {
            count = 0;
            arr = new int[m][n];
            for(int i = 0; i < m-1; i++) {
                for(int j = 0; j < n-1; j++) {
                    if(board[i].charAt(j) == '0') continue;
                    char c = board[i].charAt(j);
                    if(c == board[i].charAt(j+1) && c == board[i+1].charAt(j)
                            && c == board[i+1].charAt(j+1)) {
                        arr[i][j] = 1;
                        arr[i][j+1] = 1;
                        arr[i+1][j] = 1;
                        arr[i+1][j+1] = 1;
                    }
                }
            }

            for(int i = 0; i < arr.length; i++) {
                for(int j = 0; j < arr[0].length; j++) {
                    answer += arr[i][j];
                    if(arr[i][j] == 1) {
                        count = 1;
                        StringBuilder sb = new StringBuilder(board[i]);
                        sb.setCharAt(j, '0');
                        board[i] = sb.toString();
                    }
                }
            }

            for(int i = 1; i < m; i++) {
                for(int j = 0; j < n; j++) {
                    if(board[i].charAt(j) == '0') {
                        for(int k = i; k > 0; k--) {
                            StringBuilder sb = new StringBuilder(board[k]);
                            sb.setCharAt(j, board[k-1].charAt(j));
                            board[k] = sb.toString();

                            sb = new StringBuilder(board[k-1]);
                            sb.setCharAt(j, '0');
                            board[k-1] = sb.toString();
                        }
                    }
                }
            }
        } while (count != 0);
        
        return answer;
    }
}