class Solution {
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    public int[] solution(int m, int n, int[][] picture) {
        int numberOfArea = 0;
        int maxSizeOfOneArea = 0;
        int sum = 0;
        int[][] arr = new int[m][n];

        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                arr[i][j] = picture[i][j];
            }
        }

        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(arr[i][j] != 0) {
                    sum = dfs(arr, i, j, m, n, arr[i][j]);
                    maxSizeOfOneArea = Math.max(maxSizeOfOneArea, sum);
                    numberOfArea++;
                }
            }
        }

        int[] answer = new int[2];
        answer[0] = numberOfArea;
        answer[1] = maxSizeOfOneArea;

        return answer;
    }

    public int dfs(int[][] arr, int x, int y, int m, int n, int target) {
        int count = 1;
        if(arr[x][y] != target) return 0;
        arr[x][y] = 0;

        for(int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if(nx < 0 || nx >= m || ny < 0 || ny >= n || arr[nx][ny] == 0) continue;
            if(arr[nx][ny] != target) continue;
            count += dfs(arr, nx, ny, m, n, target);
        }
        return count;
    }
}