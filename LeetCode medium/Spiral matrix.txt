class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> list = new ArrayList<>();
        if(matrix == null || matrix.length < 1) return list;

        int left = 0, right = matrix[0].length-1;
        int up = 0, down = matrix.length-1;

        while(left <= right && up <= down) {
            for(int i = left; i <= right; i++) {
                list.add(matrix[left][i]);
            }
            for(int i = left+1; i <= down; i++) {
                list.add(matrix[i][right]);
            }
            if(--right > up) {
                for(int i = right; i >= left; i--) {
                    list.add(matrix[down][i]);
                }
            }
            if(down > ++left) {
                for(int i = --down; i >= left; i--) {
                    list.add(matrix[i][up]);
                }
            }
            up++;
        }

        return list;
    }
}내가 실패한 코드

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> list = new ArrayList<>();
        if(matrix == null || matrix.length == 0) return list;

        int left = 0, right = matrix[0].length-1;
        int up = 0, down = matrix.length-1;

        while(left <= right && up <= down) {
            for(int i = left; i <= right; i++) list.add(matrix[up][i]);
            for(int i = ++up; i <= down; i++) list.add(matrix[i][right]);
            if(up > down) break;
            for(int i = --right; i >= left; i--) list.add(matrix[down][i]);
            if(left > right) break;
            for(int i = --down; i >= up; i--) list.add(matrix[i][left]);
            left++;
        }

        return list;
    }
}정답 참고