{\rtf1\ansi\ansicpg949\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset129 AppleSDGothicNeo-Regular;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww13300\viewh10080\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
    fun solution(N: Int, stages: IntArray): IntArray \{\
        var answer = IntArray(N)\
        \
        //
\f1 \'be\'c6\'c1\'f7
\f0  
\f1 \'c5\'ac\'b8\'ae\'be\'ee\'c7\'cf\'c1\'f6
\f0  
\f1 \'b8\'f8\'c7\'d1
\f0  
\f1 \'c7\'c3\'b7\'b9\'c0\'cc\'be\'ee\'c0\'c7
\f0  
\f1 \'bc\'f6
\f0  / 
\f1 \'bd\'ba\'c5\'d7\'c0\'cc\'c1\'f6\'bf\'a1
\f0  
\f1 \'b5\'b5\'b4\'de\'c7\'d1
\f0  
\f1 \'c7\'c3\'b7\'b9\'c0\'cc\'be\'ee\'c0\'c7
\f0  
\f1 \'bc\'f6
\f0 \
        var map = mutableMapOf<Int, Float>()\
        for(i in 1..N) \{\
            var num = 0\
            var sum = 0.0f\
            for(j in stages.indices) \{\
                if(stages[j] == i) num++\
                if(stages[j] >= i) sum++\
            \}\
            map[i] = num/sum\
        \}\
        \
        val arr = map.toList().toMutableList()\
        for(i in 0 until arr.size-1) \{\
            for(j in i+1 until arr.size) \{\
                if(arr[i].second < arr[j].second) \{\
                    val tmp = arr[j]\
                    arr[j] = arr[i]\
                    arr[i] = tmp\
                \} else if(arr[i].second == arr[j].second) \{\
                    if(arr[i].first > arr[j].first) \{\
                        val tmp = arr[j]\
                        arr[j] = arr[i]\
                        arr[i] = tmp\
                    \}\
                \}\
            \}\
        \}\
        \
        for(i in 0 until N) \{\
            answer.set(i, arr[i].first)\
        \}\
        \
        return answer\
    \}\
\}}