class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<>();
        Stack<String> stack = new Stack<>();
        dfs(0, 0, "", stack, n, list);

        return list;
    }
    public void dfs(int left, int right, String str, Stack<String> stack, int n, List<String> list) {
        if(left < right) return;
        if(left == n && right == n) {
            list.add(str);
            return;
        }

        if(left < n) {
            stack.add("(");
            dfs(left+1, right, str+"(", stack, n, list);
            stack.pop();
        }

        if(right < n) {
            stack.add(")");
            dfs(left, right+1, str+")", stack, n, list);
            stack.pop();
        }
    }
}